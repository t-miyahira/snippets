{
	// Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// how to use : https://qiita.com/12345/items/97ba616d530b4f692c97
	// variables : https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables

	/* PHPUnit */
	"PHPUnit: assertTrue": {
		"prefix": ["at","true"],
		"body": [
			"\\$this->assertTrue($1);",
		],
	},
	"PHPUnit: assertFalse": {
		"prefix": ["af","false"],
		"body": [
			"\\$this->assertFalse($1);",
		],
	},
	"PHPUnit: assertIsArray": {
		"prefix": ["aa","aia","array"],
		"body": [
			"\\$this->assertIsArray($1);",
		],
	},
	"PHPUnit: assertNull": {
		"prefix": ["an","null"],
		"body": [
			"\\$this->assertNull($1);",
		],
	},
	"PHPUnit: assertNotNull": {
		"prefix": ["ann","notnull"],
		"body": [
			"\\$this->assertNotNull($1);",
		],
	},
	"PHPUnit: assertEquals": {
		"prefix": ["ae","equal"],
		"body": [
			"\\$this->assertEquals($1, $2);",
		],
	},
	"PHPUnit: assertSame": {
		"prefix": ["as","same"],
		"body": [
			"\\$this->assertSame($1, $2);",
		],
	},
	"PHPUnit: assertArrayHasKey": {
		"prefix": ["aahk","haskey"],
		"body": [
			"\\$this->assertArrayHasKey($1, $2);",
		],
	},
	"PHPUnit: expectException": {
		"prefix": ["ee","exception"],
		"body": [
			"\\$this->expectException(${1:Exception}::class);",
		],
	},
	"PHPUnit: expectExceptionMessage": {
		"prefix": ["eem","exceptionMessage"],
		"body": [
			"\\$this->expectExceptionMessage('${1:Message}');",
		],
	},
	"PHPUnit: expectExceptionMessageMatches": {
		"prefix": ["eemm","exceptionMessageMatches"],
		"body": [
			"\\$this->expectExceptionMessageMatches('/${1:Message}/');",
		],
	},
	"PHPUnit: assertArrayNotHasKey": {
		"prefix": ["aanhk","nothaskey"],
		"body": [
			"\\$this->assertArrayNotHasKey($1, $2);",
		],
	},
	"PHPUnit: Closure": {
		"prefix": ["cl","closure"],
		"body": [
			"Closure::bind(function ($2) {",
			"\t$4",
			"}, \\$this, ${1:${TM_FILENAME_BASE/Test//}}::class)->__invoke($3);",
		],
	},
	"PHPUnit: public function": {
		"prefix": ["pft","public"],
		"body": [
			"public function test_$1() {",
			"\t// given",
			"\t$2",
			"\t// when",
			"\t$3",
			"\t// then",
			"\t$4",
			"}",
		],
	},
	"PHPUnit: setUp": {
		"prefix": ["su","setup"],
		"body": [
			"public function setUp() : void {",
			"\t$1",
			"}",
		],
	},
	"PHPUnit: DataProvider": {
		"prefix": ["dp","data","dataprovider"],
		"body": [
			"/** @dataProvider ${1:methodName}_dataProvider */",
		],
	},
	"PHPUnit: DataProvider function": {
		"prefix": ["dpf","data","dataprovider","function"],
		"body": [
			"public function ${1:methodName}_dataProvider() {",
			"\treturn [",
			"\t\t[${2:Variable}],",
			"\t];",
			"}",
		],
	},
	"PHPUnit: MockObject createStub": {
		"prefix": ["cs","stub"],
		"body": [
			"\\$this->createStub($1::class);",
		],
	},
	"PHPUnit: MockObject createMock": {
		"prefix": ["cm","mock"],
		"body": [
			"\\$this->createMock($1::class);",
		],
	},
	"PHPUnit: MockObject define function twice": {
		"prefix": ["->methodtwice","mock","method"],
		"body": [
			"${1:mockVariable}->expects(\\$this->exactly(${2:2}))",
			"\t->method('$3')",
			"\t->withConsecutive(",
			"\t\t[",
			"\t\t${4:\\$this->equalTo(),} // 1回目の引数",
			"\t\t],",
			"\t\t[",
			"\t\t${5:\\$this->equalTo(),} // 2回目の引数",
			"\t\t],",
			"\t)",
			"\t->will(\\$this->onConsecutiveCalls(",
			"\t\t$6, // 1回目の戻り値",
			"\t\t$7 // 2回目の戻り値",
			"\t));",
		],
		"description": "define mock function if more then twice",
	},
	"PHPUnit: MockObject define function": {
		"prefix": ["->method","mock","method"],
		"body": [
			"->method('${1:method}')",
            "\t->willReturn('${2:return value}');",
		],
		"description": "define mock function",
	},
	"PHPUnit: MockObject define function once": {
		"prefix": ["->methodonce","mock","method"],
		"body": [
			"->expects(\\$this->once())",
			"\t->method('${1:method}')",
            "\t->willReturn('${2:return value}');",
		],
		"description": "define mock function once",
	},

	/* PHP */
	"PHP: public function": {
		"prefix": ["pf","public"],
		"body": [
			"public function $1() {",
			"\t$2",
			"}",
		],
	},
}